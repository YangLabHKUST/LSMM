// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// LSMM_Rcpp
RcppExport SEXP LSMM_Rcpp(arma::vec& Pvalue, arma::mat& Z, arma::mat& A, double alpha, double pi1_, arma::uword maxiter, double tol);
RcppExport SEXP _LSMM_LSMM_Rcpp(SEXP PvalueSEXP, SEXP ZSEXP, SEXP ASEXP, SEXP alphaSEXP, SEXP pi1_SEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Pvalue(PvalueSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type pi1_(pi1_SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(LSMM_Rcpp(Pvalue, Z, A, alpha, pi1_, maxiter, tol));
    return rcpp_result_gen;
END_RCPP
}
// LFM_Rcpp
RcppExport SEXP LFM_Rcpp(arma::vec& Pvalue, arma::mat& Z, double alpha, double pi1_, arma::uword maxiter, double tol);
RcppExport SEXP _LSMM_LFM_Rcpp(SEXP PvalueSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP pi1_SEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Pvalue(PvalueSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type pi1_(pi1_SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(LFM_Rcpp(Pvalue, Z, alpha, pi1_, maxiter, tol));
    return rcpp_result_gen;
END_RCPP
}
// TwoGroup_Rcpp
RcppExport SEXP TwoGroup_Rcpp(arma::vec& Pvalue, double alpha, double pi1_, arma::uword maxiter, double tol);
RcppExport SEXP _LSMM_TwoGroup_Rcpp(SEXP PvalueSEXP, SEXP alphaSEXP, SEXP pi1_SEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Pvalue(PvalueSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type pi1_(pi1_SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(TwoGroup_Rcpp(Pvalue, alpha, pi1_, maxiter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LSMM_LSMM_Rcpp", (DL_FUNC) &_LSMM_LSMM_Rcpp, 7},
    {"_LSMM_LFM_Rcpp", (DL_FUNC) &_LSMM_LFM_Rcpp, 6},
    {"_LSMM_TwoGroup_Rcpp", (DL_FUNC) &_LSMM_TwoGroup_Rcpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_LSMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
